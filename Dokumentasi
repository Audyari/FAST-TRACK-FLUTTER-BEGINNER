Collections Tipe Data

===================
https://dartpad.dev/

1. List:

void main() {
  // Membuat List
  List<String> names = ['Alice', 'Bob', 'Charlie'];

  // Mengakses elemen List
  print(names[0]); // Output: Alice
  print(names[1]); // Output: Bob
  print(names[2]); // Output: Charlie

  // Menambah elemen ke List
  names.add('David');
  print(names); // Output: [Alice, Bob, Charlie, David]

  // Menghapus elemen dari List
  names.remove('Bob');
  print(names); // Output: [Alice, Charlie, David]

  // Melakukan iterasi pada List
  for (var name in names) {
    print(name);
  }
  // Output:
  // Alice
  // Charlie
  // David

  // Menggunakan method List lainnya
  print(names.length); // Output: 3
  print(names.contains('Alice')); // Output: true
  print(names.indexOf('Charlie')); // Output: 1
  names.sort();
  print(names); // Output: [Alice, Charlie, David]
}

=========================================================
2. Map:

void main() {
  // Membuat Map
  Map<String, int> ages = {
    'Alice': 25,
    'Bob': 30,
    'Charlie': 35,
  };

  // Mengakses nilai berdasarkan key
  print(ages['Alice']); // Output: 25
  print(ages['Bob']); // Output: 30
  print(ages['Charlie']); // Output: 35

  // Menambah/Mengubah pasangan key-value
  ages['David'] = 40;
  ages['Alice'] = 26;
  print(ages); // Output: {Alice: 26, Bob: 30, Charlie: 35, David: 40}

  // Menghapus pasangan key-value
  ages.remove('Bob');
  print(ages); // Output: {Alice: 26, Charlie: 35, David: 40}

  // Melakukan iterasi pada Map
  for (var entry in ages.entries) {
    print('${entry.key}: ${entry.value}');
  }
  // Output:
  // Alice: 26
  // Charlie: 35
  // David: 40

  // Menggunakan method Map lainnya
  print(ages.length); // Output: 3
  print(ages.containsKey('Charlie')); // Output: true
  print(ages.containsValue(35)); // Output: true
  print(ages.keys); // Output: (Alice, Charlie, David)
  print(ages.values); // Output: (26, 35, 40)
}

=============================================

3.Set:

void main() {
  // Membuat Set
  Set<String> fruits = {'apple', 'banana', 'orange'};

  // Menambah elemen ke Set
  fruits.add('grape');
  print(fruits); // Output: {apple, banana, orange, grape}

  // Menghapus elemen dari Set
  fruits.remove('banana');
  print(fruits); // Output: {apple, orange, grape}

  // Melakukan iterasi pada Set
  for (var fruit in fruits) {
    print(fruit);
  }
  // Output:
  // apple
  // orange
  // grape

  // Menggunakan method Set lainnya
  print(fruits.length); // Output: 3
  print(fruits.contains('apple')); // Output: true
  print(fruits.union({'watermelon', 'kiwi'})); // Output: {apple, orange, grape, watermelon, kiwi}
  print(fruits.intersection({'grape', 'kiwi'})); // Output: {grape}
  print(fruits.difference({'apple', 'kiwi'})); // Output: {orange, grape}
}

=====================================

Iterable:

void main() {
  // Membuat Iterable
  Iterable<int> numbers = [1, 2, 3, 4, 5];

  // Melakukan operasi pada Iterable
  Iterable<int> doubledNumbers = numbers.map((n) => n * 2);
  print(doubledNumbers); // Output: (2, 4, 6, 8, 10)

  Iterable<int> evenNumbers = numbers.where((n) => n.isEven);
  print(evenNumbers); // Output: (2, 4)

  int sum = numbers.reduce((value, element) => value + element);
  print(sum); // Output: 15

  // Mengkonversi Iterable menjadi List
  List<int> numbersList = numbers.toList();
  print(numbersList); // Output: [1, 2, 3, 4, 5]

  // Menggunakan method Iterable lainnya
  print(numbers.contains(3)); // Output: true
  print(numbers.elementAt(2)); // Output: 3
  print(numbers.first); // Output: 1
  print(numbers.last); // Output: 5
  print(numbers.length); // Output: 5
}


======================================
